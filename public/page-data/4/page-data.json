{"componentChunkName":"component---src-templates-post-jsx","path":"/4/","result":{"data":{"site":{"siteMetadata":{"title":"CATCH NPE"}},"markdownRemark":{"id":"77088a89-4f41-5fd9-935b-ed7406bb0e20","excerpt":"단일 프로세스 초창기 컴퓨터를 상상하면 지금처럼 복잡한 방법이 아닌, 한번에 하나의 프로그램만 실행 할 수 있었을것이다.\n이 말은 다른 프로그램을 사용 해야 하는 순간 기존 프로그램이 종료 되거나,\n끝날때 까지 기다려야 합니다. img.png 멀티 프로그래밍 img.png 이러한 문제를 해결하기 위해 어쩔 수 없이 작업이 멈추는 구간에 다른 작업을 진행하…","html":"<h2 id=\"단일-프로세스\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%9D%BC-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\" aria-label=\"단일 프로세스 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>단일 프로세스</h2>\n<hr>\n<p>초창기 컴퓨터를 상상하면 지금처럼 복잡한 방법이 아닌, 한번에 하나의 프로그램만 실행 할 수 있었을것이다.\n이 말은 다른 프로그램을 사용 해야 하는 순간 기존 프로그램이 종료 되거나,\n끝날때 까지 기다려야 합니다.</p>\n<br>\n<p><img src=\"%EB%8B%A8%EC%9D%BC%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4.png\" alt=\"img.png\"></p>\n<br>\nCPU 관점에서 본다면 특정 작업을 수행중 IO 작업이 생긴다면 IO작업동안 CPU는 멈추게\n될것이고 그 상황에서 CPU가 놀고 있게 되는 시간이 늘어나는 것입니다.\n<br>\n<h2 id=\"멀티-프로그래밍\" style=\"position:relative;\"><a href=\"#%EB%A9%80%ED%8B%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"멀티 프로그래밍 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>멀티 프로그래밍</h2>\n<p><img src=\"%EB%A9%80%ED%8B%B0%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D.png\" alt=\"img.png\"></p>\n<p>이러한 문제를 해결하기 위해 어쩔 수 없이 작업이 멈추는 구간에 다른 작업을 진행하는 방법을 사용하게 된다.\n이를 멀티 프로그래밍이라고 부르며 그림처럼 CPU 사용률을 높이기 위한 목적이었습니다.</p>\n<p>하지만 이러한 방식의 문제는 앞선 프로세스가 길어질 수록 즉 IO사용처럼 비는 시간없이 순수하게 많은 시간을\n쓰게 된다면 이후 프로세스가 계속 기다려야 하는 문제가 있었습니다.</p>\n<br>\n<h2 id=\"멀티-태스킹\" style=\"position:relative;\"><a href=\"#%EB%A9%80%ED%8B%B0-%ED%83%9C%EC%8A%A4%ED%82%B9\" aria-label=\"멀티 태스킹 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>멀티 태스킹</h2>\n<p><img src=\"%EB%A9%80%ED%8B%B0%ED%83%9C%EC%8A%A4%ED%82%B9.png\" alt=\"img.png\"></p>\n<p>멀티 프로그래밍 방식에서 더 나아가 모든 프로세스가 공정하게 특정 짧은 시간만 실행되게 반복한다면 길게 시행되는\n프로세스 뒤에 오는 프로세스가 기다리는 문제가 없을 것이다. 이것이 멀티태스킹을 사용하는 이유입니다.</p>\n<p><strong>프로세스1</strong>에서 <strong>프로세스2</strong>로 작업을 스위칭 하는것을 문맥 교환(Context Switching)이라고\n부르게 되는데 이러한 문맥교환은 값싼 작업이 아니고 이러한 작업이 자주 일어나게 된다면 비효율 적인 단점이 부각되다 보니\n새로운 방식을 사용하게 됩니다.</p>\n<br>\n<h2 id=\"멀티-프로세싱\" style=\"position:relative;\"><a href=\"#%EB%A9%80%ED%8B%B0-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8B%B1\" aria-label=\"멀티 프로세싱 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>멀티 프로세싱</h2>\n<p>멀티 프로세싱이란 이전 멀티 태스킹과 이름은 비슷 하지만 완전히 다른 방식입니다.</p>\n<p>이전 방식은 하나의 <strong>CPU</strong>를 어떻게 쪼개서 사용할까라는 목적이였다면, <strong>멀티 프로세싱</strong>은 <strong>CPU</strong> 작업단위인\n코어 자체를 늘려서 여러 CPU코어가 동시에 작업하는것을 멀티 프로세싱이라고 부르게 됩니다.</p>\n<p><img src=\"%EB%A9%80%ED%8B%B0%ED%94%84%EB%A1%9C%EC%84%B8%EC%8B%B1.png\" alt=\"img.png\"></p>\n<p>멀티 프로세싱은 CPU코어 수를 늘리는 방법이기 때문에, 이를 어떻게 처리할까에 대한 내용은 멀티 프로세싱 자체의 내용이 아니고 앞서 나왔던 방법론을 도입할 수 있습니다.\n그림처럼 하나의 프로세스를 여러 코어가 담당하는 방법이나, 여러 프로세스를 여러 코어가 담당 할 수 도 있습니다.</p>\n<h3 id=\"출처\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>출처</h3>\n<p><a href=\"https://medium.com/@ashappyasiknow/single-process-system-multi-programming-multitasking-%EC%9D%B4%EB%9E%80-9f9b65ec0311\">사진출처</a></p>","frontmatter":{"title":"4. 멀티프로그래밍, 시분할 시스템, 멀티프로세싱 개념","date":"September 07, 2025","update":"September 07, 2025","tags":["운영체제"],"series":"운영체제 기본 개념"},"fields":{"slug":"/4/","readingTime":{"minutes":3.94}}},"seriesList":{"edges":[{"node":{"id":"86bebffe-ff00-58c2-a118-12a9ba3dffb6","fields":{"slug":"/1/"},"frontmatter":{"title":"1. 운영체제의 역할과 커널의 기능"}}},{"node":{"id":"4df66f0c-fb47-581a-8541-4336bdf66a9c","fields":{"slug":"/2/"},"frontmatter":{"title":"2. CPU 스케줄링, 시스템 자원 관리"}}},{"node":{"id":"83591dea-9474-596e-a50c-9686920054ff","fields":{"slug":"/3/"},"frontmatter":{"title":"3. 유저모드와 커널모드 전환, 시스템 콜의 동작 원리"}}},{"node":{"id":"77088a89-4f41-5fd9-935b-ed7406bb0e20","fields":{"slug":"/4/"},"frontmatter":{"title":"4. 멀티프로그래밍, 시분할 시스템, 멀티프로세싱 개념"}}},{"node":{"id":"359416d8-e0ed-5c0b-a589-90cbc4a84fc0","fields":{"slug":"/5/"},"frontmatter":{"title":"5. 인터럽트와 DMA를 통한 효율적 입출력 처리"}}},{"node":{"id":"0fed2fcc-c794-558d-ab3f-4fbb91b7721d","fields":{"slug":"/6/"},"frontmatter":{"title":"6. 동기식/비동기식 I/O의 차이와 활용 사례"}}}]},"previous":{"fields":{"slug":"/3/"},"frontmatter":{"title":"3. 유저모드와 커널모드 전환, 시스템 콜의 동작 원리"}},"next":{"fields":{"slug":"/5/"},"frontmatter":{"title":"5. 인터럽트와 DMA를 통한 효율적 입출력 처리"}}},"pageContext":{"id":"77088a89-4f41-5fd9-935b-ed7406bb0e20","series":"운영체제 기본 개념","previousPostId":"83591dea-9474-596e-a50c-9686920054ff","nextPostId":"359416d8-e0ed-5c0b-a589-90cbc4a84fc0"}},"staticQueryHashes":[],"slicesMap":{}}