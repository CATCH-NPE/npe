{"componentChunkName":"component---src-templates-post-jsx","path":"/3/","result":{"data":{"site":{"siteMetadata":{"title":"CATCH NPE"}},"markdownRemark":{"id":"83591dea-9474-596e-a50c-9686920054ff","excerpt":"이중모드 운영체제는 자원을 충돌 없이 효율적으로 사용하기 위해 자원 관리의 진입점이 된다고 말했습니다. 그럼 일반 응용프로그램은 어떻게 자원에 접근 할 수 있을까요? 이에 대한 답은 이중 모드 입니다. img.png 위 사진 처럼 CPU가 명령을 실행하는 방식을 사용자 모드 와 커널 모드로 나누어 사용하게 됩니다. 사용자 모드 사용자 모드는 운영체제 서비…","html":"<h2 id=\"이중모드\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A4%91%EB%AA%A8%EB%93%9C\" aria-label=\"이중모드 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>이중모드</h2>\n<hr>\n<p>운영체제는 자원을 충돌 없이 효율적으로 사용하기 위해 자원 관리의 진입점이 된다고 말했습니다.</p>\n<blockquote>\n<p>그럼 일반 응용프로그램은 어떻게 자원에 접근 할 수 있을까요?</p>\n</blockquote>\n<p>이에 대한 답은 <strong>이중 모드</strong> 입니다.</p>\n<br>\n<p><img src=\"%EC%9D%B4%EC%A4%91%EB%AA%A8%EB%93%9C.png\" alt=\"img.png\"></p>\n<br>\n<p>위 사진 처럼 <strong>CPU</strong>가 명령을 실행하는 방식을 <strong>사용자 모드</strong> 와 <strong>커널 모드</strong>로 나누어 사용하게 됩니다.</p>\n<br>\n<h3 id=\"사용자-모드\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%9E%90-%EB%AA%A8%EB%93%9C\" aria-label=\"사용자 모드 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>사용자 모드</h3>\n<p>사용자 모드는 운영체제 서비스를 제공받을 수 없는 실행 모드입니다.\n</br> CPU가 해당 모드인 경우, 입출력 명령어와 같은 하드웨어 자원 접근 명령을 실행할 수 없습니다. 일반 프로그램은 기본적으로 사용자 모드로 실행됩니다.</p>\n<br>\n<h3 id=\"커널-모드\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%84%90-%EB%AA%A8%EB%93%9C\" aria-label=\"커널 모드 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>커널 모드</h3>\n<p>커널모드는 운영체제 서비스를 제공받을 수 있는 실행 모드로 커널 영역의 코드를 실행할 수 있습니다.\n</br> CPU가 커널 모드로 명령어를 실행하면 자원에 접근하는 명령어를 비롯한 모든 명령어를 실행할 수 있으며, 운영체제는 커널 모드로 실행됩니다.</p>\n<br>\n<p>요약 하자면 일반 응용프로그램은 평소에 <strong>사용자 모드</strong>를 통해서 실행 되다가 실제 운영체제의 코드를 실행하여야 하는 순간이 오면 <strong>커널 모드</strong>로 전환하여 실행하다가\n운영체제의 코드 실행 지점이 끝난다면 다시 <strong>사용자 모드</strong>로 전환되게 됩니다.</p>\n<p>이러한 방식으로 자원을 <strong>운영 체제</strong>로 하여금 독자적으로 관리할 수 있게 합니다.</p>\n<br>\n<blockquote>\n<p>사용자 모드에서 어떻게 커널모드로 전환할까?</p>\n</blockquote>\n<p>사용자 모드에서 커널모드로 전환하는 방식은 <strong>시스템 콜</strong>에 의해서 발생합니다.</p>\n<br>\n<p><img src=\"%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%BD%9C.png\" alt=\"img.png\"></p>\n<br>\n<p>그림처럼 사용자 모드로 실행되는 프로그램이 자원에 접근해야 할때 운영체제에 커널 모드로 요청을 보내게 되고 이것을 <strong>시스템 콜</strong>이라고 부르게 됩니다.</p>\n<p><strong>시스템 호출</strong>은 <strong>소프트 웨어 인터럽트</strong>에 속합니다. 이러한 특징 때문에 <strong>CPU</strong>가 <strong>시스템 호출</strong>을 처리하는 순서가 <strong>인터럽트 처리 순서</strong>와 비슷합니다.</p>\n<p><strong>시스템 호출</strong>이 발생하면 <strong>지금까지의 작업을 백업</strong> 하고, 커널 영역 내의 호출 하여야 하는 코드를 실행 한 뒤 다시 돌아와 기존 프로그램을 계속 실행합니다.</p>\n<br>\n<p><img src=\"%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%BD%9C%EC%9E%91%EB%8F%99%EB%B0%A9%EC%8B%9D.png\" alt=\"img.png\"></p>\n<br>\n<p>그림을 통해서 이해를 하게 되면,</p>\n<ol>\n<li>응용 프로그램은 일반적인 작업을 수행중 운영체제 코드를 실행 하여야 하는 작업에 도달하게 됩니다.</li>\n<li>그러면 응용프로그램은 운영체제에게 자원 접근에 대한 시스템 콜을 날리게 된다.</li>\n<li>현재 작업을 백업하게 됩니다.</li>\n<li>이후 응용프로그램은 운영체제의 코드를 실행합니다.</li>\n<li>작업이 끝나면 다시 사용자 영역으로 돌아와 멈춰둔 작업을 진행합니다.</li>\n</ol>\n<p>이런 세부적인 순서를 진행하게 됩니다.</p>\n<h3 id=\"출처\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98\" aria-label=\"출처 permalink\" class=\"heading-anchor before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\"><path d=\"M6.188 8.719c.439-.439.926-.801 1.444-1.087 2.887-1.591 6.589-.745 8.445 2.069l-2.246 2.245c-.644-1.469-2.243-2.305-3.834-1.949-.599.134-1.168.433-1.633.898l-4.304 4.306c-1.307 1.307-1.307 3.433 0 4.74 1.307 1.307 3.433 1.307 4.74 0l1.327-1.327c1.207.479 2.501.67 3.779.575l-2.929 2.929c-2.511 2.511-6.582 2.511-9.093 0s-2.511-6.582 0-9.093l4.304-4.306zm6.836-6.836l-2.929 2.929c1.277-.096 2.572.096 3.779.574l1.326-1.326c1.307-1.307 3.433-1.307 4.74 0 1.307 1.307 1.307 3.433 0 4.74l-4.305 4.305c-1.311 1.311-3.44 1.3-4.74 0-.303-.303-.564-.68-.727-1.051l-2.246 2.245c.236.358.481.667.796.982.812.812 1.846 1.417 3.036 1.704 1.542.371 3.194.166 4.613-.617.518-.286 1.005-.648 1.444-1.087l4.304-4.305c2.512-2.511 2.512-6.582.001-9.093-2.511-2.51-6.581-2.51-9.092 0z\"/></svg></a>출처</h3>\n<p><a href=\"https://hongong.hanbit.co.kr/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EB%9E%80-%EC%BB%A4%EB%84%90%EC%9D%98-%EA%B0%9C%EB%85%90-%EC%9D%91%EC%9A%A9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%8B%A4%ED%96%89%EC%9D%84-%EC%9C%84%ED%95%9C/\">사진출처</a></p>","frontmatter":{"title":"3. 유저모드와 커널모드 전환, 시스템 콜의 동작 원리","date":"September 06, 2025","update":"September 06, 2025","tags":["운영체제"],"series":"운영체제 기본 개념"},"fields":{"slug":"/3/","readingTime":{"minutes":4.46}}},"seriesList":{"edges":[{"node":{"id":"86bebffe-ff00-58c2-a118-12a9ba3dffb6","fields":{"slug":"/1/"},"frontmatter":{"title":"1. 운영체제의 역할과 커널의 기능"}}},{"node":{"id":"4df66f0c-fb47-581a-8541-4336bdf66a9c","fields":{"slug":"/2/"},"frontmatter":{"title":"2. CPU 스케줄링, 시스템 자원 관리"}}},{"node":{"id":"83591dea-9474-596e-a50c-9686920054ff","fields":{"slug":"/3/"},"frontmatter":{"title":"3. 유저모드와 커널모드 전환, 시스템 콜의 동작 원리"}}},{"node":{"id":"77088a89-4f41-5fd9-935b-ed7406bb0e20","fields":{"slug":"/4/"},"frontmatter":{"title":"4. 멀티프로그래밍, 시분할 시스템, 멀티프로세싱 개념"}}},{"node":{"id":"359416d8-e0ed-5c0b-a589-90cbc4a84fc0","fields":{"slug":"/5/"},"frontmatter":{"title":"5. 인터럽트와 DMA를 통한 효율적 입출력 처리"}}},{"node":{"id":"0fed2fcc-c794-558d-ab3f-4fbb91b7721d","fields":{"slug":"/6/"},"frontmatter":{"title":"6. 동기식/비동기식 I/O의 차이와 활용 사례"}}}]},"previous":{"fields":{"slug":"/2/"},"frontmatter":{"title":"2. CPU 스케줄링, 시스템 자원 관리"}},"next":{"fields":{"slug":"/4/"},"frontmatter":{"title":"4. 멀티프로그래밍, 시분할 시스템, 멀티프로세싱 개념"}}},"pageContext":{"id":"83591dea-9474-596e-a50c-9686920054ff","series":"운영체제 기본 개념","previousPostId":"4df66f0c-fb47-581a-8541-4336bdf66a9c","nextPostId":"77088a89-4f41-5fd9-935b-ed7406bb0e20"}},"staticQueryHashes":[],"slicesMap":{}}